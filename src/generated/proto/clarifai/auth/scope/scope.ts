// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.20.3
// source: proto/clarifai/auth/scope/scope.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "clarifai.auth.scope";

/**
 * Next index: 41
 * NOTE: When updating the list of "clarifai_exposed" scopes, please also
 * update the TestScopes function in main_key_test.go and TestGetExposedScopes function in
 * scope_test.go
 *
 * The dependencies listed for each scope are simply recommendations so that a user
 * cannot make a key that would be useless. Beyond the key creation they are not enforced
 * but rather the scopes are enforce when data is accessed.
 *
 * There is the following conventions in place, make sure you add them to the scopes for all new
 * resource types:
 *
 * 1. *_Add requires the corresponding _Get.
 * 2. *_Delete requires the corresponding _Add and _Get.
 * 3. *_Patch is deprecated and not check anywhere.
 *
 * Think of the dependencies in this file at the DB level. If you cannot make a DB call to Get, Add
 * or Delete a resource without having access to another resource then you should add it here. That
 * should for the most part be the same resource type. In service.proto for the API level you will
 * also specify cl_depending_scopes for each API endpoint. Those cover cases where an endpoint
 * might need to access more than just that one resource type in order to operate (ie. API handlers
 * that make multiple DB calls of various resource types likely have more cl_depending_scopes than
 * the ones listed below). For example: PostCollectors to create a collector we make sure that you
 * can do model predictions, get concepts, etc. so that you don't have a collector that would be
 * useless at the end of that API handler but below you can see that the dependencies of Collector
 * scopes are only on other Collector scopes.
 */
export enum S {
  /**
   * undef - introduce undef so that the zero (default/unset) value of the enum is not a real
   * permission.  undef is only present for this purpose and should not be used
   * to indicate any "real" value.
   */
  undef = 0,
  All = 1,
  /** Predict - Make an rpc to our prediction services. */
  Predict = 2,
  /** Inputs_Add - Write to the inputs table in the DB. */
  Inputs_Add = 4,
  /** Inputs_Get - Read from the inputs table in the DB. */
  Inputs_Get = 5,
  /**
   * Inputs_Patch - To patch we need read/write.
   * Deprecated.
   * Optionally needs Concepts_Add.
   *
   * @deprecated
   */
  Inputs_Patch = 7,
  /** Inputs_Delete - To delete we need read/write */
  Inputs_Delete = 8,
  /**
   * Outputs_Patch - Deprecated.
   *
   * @deprecated
   */
  Outputs_Patch = 9,
  /** Concepts_Add - Write to the concepts DB tables. */
  Concepts_Add = 10,
  /** Concepts_Get - Read from the concepts DB tables. */
  Concepts_Get = 11,
  /**
   * Concepts_Patch - To patch we need read/write.
   * Deprecated
   *
   * @deprecated
   */
  Concepts_Patch = 12,
  /**
   * Concepts_Delete - To delete we need read/write.
   * Note: not implemented.
   */
  Concepts_Delete = 13,
  /** Models_Add - Write to the models DB tables. */
  Models_Add = 14,
  /** Models_Get - Read from the models and models versions DB tables. */
  Models_Get = 15,
  /**
   * Models_Patch - To patch we need read/write.
   * Deprecated.
   *
   * @deprecated
   */
  Models_Patch = 16,
  /** Models_Delete - To delete we need read/write. */
  Models_Delete = 17,
  /**
   * Models_Train - Note: Models_Train is effectively doing POST /models/{models_id}/versions so it's treated that
   * way in terms of data access under the hood.
   * Write to the model versions DB table.
   */
  Models_Train = 26,
  /** Models_Sync - Internal only model syncing. */
  Models_Sync = 27,
  /** ModelExports_Get - To get model version export */
  ModelExports_Get = 142,
  /** ModelExports_Add - To create model version export */
  ModelExports_Add = 143,
  /** Models_Pull - To pull the model version's image */
  Models_Pull = 150,
  /** Workflows_Add - Write to the workflows DB table. */
  Workflows_Add = 18,
  /** Workflows_Get - Read from the workflows DB table. */
  Workflows_Get = 19,
  /**
   * Workflows_Patch - To patch we need read/write.
   * Deprecated.
   *
   * @deprecated
   */
  Workflows_Patch = 20,
  /** Workflows_Delete - To delete we need read/write. */
  Workflows_Delete = 21,
  WorkflowMetrics_Get = 96,
  WorkflowMetrics_Add = 97,
  WorkflowMetrics_Delete = 98,
  /**
   * TSNEVisualizations_Add - Write to the visualizations DB table.
   * Deprecated
   *
   * @deprecated
   */
  TSNEVisualizations_Add = 24,
  /**
   * TSNEVisualizations_Get - Read from the visualizations DB table.
   * Deprecated
   *
   * @deprecated
   */
  TSNEVisualizations_Get = 25,
  /** Annotations_Add - Write to the annotations DB table. */
  Annotations_Add = 37,
  /** Annotations_Get - Read from the annotations DB table. */
  Annotations_Get = 38,
  /**
   * Annotations_Patch - To patch we need read/write.
   * Deprecated.
   *
   * @deprecated
   */
  Annotations_Patch = 39,
  /** Annotations_Delete - To delete we need read/write. */
  Annotations_Delete = 40,
  /** Collectors_Add - Write to the collectors DB table. */
  Collectors_Add = 41,
  /** Collectors_Get - Read from the collectors DB table. */
  Collectors_Get = 42,
  /** Collectors_Delete - To delete we need read/write. */
  Collectors_Delete = 43,
  /** Apps_Add - Write to the apps DB table. */
  Apps_Add = 44,
  /** Apps_Get - Read from the apps DB table. */
  Apps_Get = 45,
  /** Apps_Delete - To delete we need read/write. */
  Apps_Delete = 46,
  /** Keys_Add - Write to the keys DB table. */
  Keys_Add = 47,
  /** Keys_Get - Read from the keys DB table. */
  Keys_Get = 48,
  /** Keys_Delete - To delete we need read/write. */
  Keys_Delete = 49,
  /** Collaborators_Add - Write to the app sharing DB table */
  Collaborators_Add = 51,
  /** Collaborators_Get - Read from the app sharing DB table */
  Collaborators_Get = 50,
  /** Collaborators_Delete - To delete we need read/write */
  Collaborators_Delete = 52,
  /** Metrics_Add - Write to the metrics table */
  Metrics_Add = 54,
  /** Metrics_Get - Read from metrics table */
  Metrics_Get = 53,
  /** Metrics_Delete - To delete we need read/write */
  Metrics_Delete = 63,
  /** Tasks_Add - Write to tasks DB table. */
  Tasks_Add = 55,
  /** Tasks_Get - Read from the tasks DB table. */
  Tasks_Get = 56,
  /** Tasks_Delete - To delete we need read/write */
  Tasks_Delete = 70,
  /** PasswordPolicies_Add - Write to the password_policies DB table */
  PasswordPolicies_Add = 57,
  /** PasswordPolicies_Get - Read from the password_policies DB table */
  PasswordPolicies_Get = 58,
  /** PasswordPolicies_Delete - To delete password_policies we need read/write */
  PasswordPolicies_Delete = 59,
  /** LabelOrders_Get - Read from label orders table */
  LabelOrders_Get = 67,
  /** LabelOrders_Add - Write to label orders table */
  LabelOrders_Add = 68,
  /** LabelOrders_Delete - To delete label orders we need read/write */
  LabelOrders_Delete = 69,
  /** FindDuplicateAnnotationsJobs_Add - CRUD on FindDuplicateAnnotationsJobs table */
  FindDuplicateAnnotationsJobs_Add = 102,
  FindDuplicateAnnotationsJobs_Get = 103,
  FindDuplicateAnnotationsJobs_Delete = 104,
  Datasets_Get = 105,
  Datasets_Add = 106,
  Datasets_Delete = 107,
  /** Modules_Add - Write to the modules DB tables. */
  Modules_Add = 108,
  /** Modules_Get - Read from the modules and modules versions DB tables. */
  Modules_Get = 109,
  /** Modules_Delete - To delete we need read/write. */
  Modules_Delete = 110,
  /** InstalledModuleVersions_Add - Write to the InstalledModuleVersions DB tables. */
  InstalledModuleVersions_Add = 111,
  /** InstalledModuleVersions_Get - Read from the InstalledModuleVersions and InstalledModuleVersions versions DB tables. */
  InstalledModuleVersions_Get = 112,
  /** InstalledModuleVersions_Delete - To delete we need read/write. */
  InstalledModuleVersions_Delete = 113,
  /** Search - Make an rpc to our search services. */
  Search = 3,
  /** SavedSearch_Get - To get a saved search. */
  SavedSearch_Get = 114,
  /** SavedSearch_Add - To add a saved search */
  SavedSearch_Add = 115,
  /** SavedSearch_Delete - To delete a saved search */
  SavedSearch_Delete = 116,
  ModelVersionPublications_Add = 117,
  ModelVersionPublications_Delete = 118,
  WorkflowPublications_Add = 119,
  WorkflowPublications_Delete = 120,
  /** BulkOperation_Add - To write bulk operations to the DB */
  BulkOperation_Add = 121,
  /** BulkOperation_Get - To Read Bulk Operations from the DB */
  BulkOperation_Get = 122,
  /** BulkOperation_Delete - To Delete Bulk Operations from the DB */
  BulkOperation_Delete = 123,
  /** HistoricalUsage_Get - To read historical usage from usage.dashboard_items table */
  HistoricalUsage_Get = 124,
  /** Uploads_Get - To read uploaded files and archives info from Uploads endpoints */
  Uploads_Get = 128,
  /** Uploads_Add - To upload files or archives through the Uploads endpoints */
  Uploads_Add = 129,
  Uploads_Delete = 130,
  /** Runners_Get - To control remote runners */
  Runners_Get = 131,
  Runners_Add = 132,
  Runners_Delete = 133,
  RunnerItems_Get = 134,
  RunnerItems_Add = 135,
  /** Nodepools_Get - Pools of compute resources. */
  Nodepools_Get = 136,
  Nodepools_Add = 137,
  Nodepools_Delete = 138,
  /** ComputeClusters_Get - Cluster of machines in a region of cloud */
  ComputeClusters_Get = 139,
  ComputeClusters_Add = 140,
  ComputeClusters_Delete = 141,
  /** Deployments_Get - How to autoscale resources within nodepools. */
  Deployments_Get = 144,
  Deployments_Add = 145,
  Deployments_Delete = 146,
  InstanceTypes_Get = 148,
  AuditLogs_Get = 149,
  LogEntries_Get = 151,
  WorkflowVersionEvaluations_Get = 152,
  WorkflowVersionEvaluations_Add = 153,
  Pipelines_Get = 154,
  Pipelines_Add = 155,
  Pipelines_Delete = 156,
  PipelineSteps_Get = 157,
  PipelineSteps_Add = 158,
  /** PipelineSteps_Pull - To pull the pipeline step version's image */
  PipelineSteps_Pull = 159,
  Secrets_Get = 160,
  Secrets_Add = 161,
  Secrets_Delete = 162,
  UNRECOGNIZED = -1,
}

export function sFromJSON(object: any): S {
  switch (object) {
    case 0:
    case "undef":
      return S.undef;
    case 1:
    case "All":
      return S.All;
    case 2:
    case "Predict":
      return S.Predict;
    case 4:
    case "Inputs_Add":
      return S.Inputs_Add;
    case 5:
    case "Inputs_Get":
      return S.Inputs_Get;
    case 7:
    case "Inputs_Patch":
      return S.Inputs_Patch;
    case 8:
    case "Inputs_Delete":
      return S.Inputs_Delete;
    case 9:
    case "Outputs_Patch":
      return S.Outputs_Patch;
    case 10:
    case "Concepts_Add":
      return S.Concepts_Add;
    case 11:
    case "Concepts_Get":
      return S.Concepts_Get;
    case 12:
    case "Concepts_Patch":
      return S.Concepts_Patch;
    case 13:
    case "Concepts_Delete":
      return S.Concepts_Delete;
    case 14:
    case "Models_Add":
      return S.Models_Add;
    case 15:
    case "Models_Get":
      return S.Models_Get;
    case 16:
    case "Models_Patch":
      return S.Models_Patch;
    case 17:
    case "Models_Delete":
      return S.Models_Delete;
    case 26:
    case "Models_Train":
      return S.Models_Train;
    case 27:
    case "Models_Sync":
      return S.Models_Sync;
    case 142:
    case "ModelExports_Get":
      return S.ModelExports_Get;
    case 143:
    case "ModelExports_Add":
      return S.ModelExports_Add;
    case 150:
    case "Models_Pull":
      return S.Models_Pull;
    case 18:
    case "Workflows_Add":
      return S.Workflows_Add;
    case 19:
    case "Workflows_Get":
      return S.Workflows_Get;
    case 20:
    case "Workflows_Patch":
      return S.Workflows_Patch;
    case 21:
    case "Workflows_Delete":
      return S.Workflows_Delete;
    case 96:
    case "WorkflowMetrics_Get":
      return S.WorkflowMetrics_Get;
    case 97:
    case "WorkflowMetrics_Add":
      return S.WorkflowMetrics_Add;
    case 98:
    case "WorkflowMetrics_Delete":
      return S.WorkflowMetrics_Delete;
    case 24:
    case "TSNEVisualizations_Add":
      return S.TSNEVisualizations_Add;
    case 25:
    case "TSNEVisualizations_Get":
      return S.TSNEVisualizations_Get;
    case 37:
    case "Annotations_Add":
      return S.Annotations_Add;
    case 38:
    case "Annotations_Get":
      return S.Annotations_Get;
    case 39:
    case "Annotations_Patch":
      return S.Annotations_Patch;
    case 40:
    case "Annotations_Delete":
      return S.Annotations_Delete;
    case 41:
    case "Collectors_Add":
      return S.Collectors_Add;
    case 42:
    case "Collectors_Get":
      return S.Collectors_Get;
    case 43:
    case "Collectors_Delete":
      return S.Collectors_Delete;
    case 44:
    case "Apps_Add":
      return S.Apps_Add;
    case 45:
    case "Apps_Get":
      return S.Apps_Get;
    case 46:
    case "Apps_Delete":
      return S.Apps_Delete;
    case 47:
    case "Keys_Add":
      return S.Keys_Add;
    case 48:
    case "Keys_Get":
      return S.Keys_Get;
    case 49:
    case "Keys_Delete":
      return S.Keys_Delete;
    case 51:
    case "Collaborators_Add":
      return S.Collaborators_Add;
    case 50:
    case "Collaborators_Get":
      return S.Collaborators_Get;
    case 52:
    case "Collaborators_Delete":
      return S.Collaborators_Delete;
    case 54:
    case "Metrics_Add":
      return S.Metrics_Add;
    case 53:
    case "Metrics_Get":
      return S.Metrics_Get;
    case 63:
    case "Metrics_Delete":
      return S.Metrics_Delete;
    case 55:
    case "Tasks_Add":
      return S.Tasks_Add;
    case 56:
    case "Tasks_Get":
      return S.Tasks_Get;
    case 70:
    case "Tasks_Delete":
      return S.Tasks_Delete;
    case 57:
    case "PasswordPolicies_Add":
      return S.PasswordPolicies_Add;
    case 58:
    case "PasswordPolicies_Get":
      return S.PasswordPolicies_Get;
    case 59:
    case "PasswordPolicies_Delete":
      return S.PasswordPolicies_Delete;
    case 67:
    case "LabelOrders_Get":
      return S.LabelOrders_Get;
    case 68:
    case "LabelOrders_Add":
      return S.LabelOrders_Add;
    case 69:
    case "LabelOrders_Delete":
      return S.LabelOrders_Delete;
    case 102:
    case "FindDuplicateAnnotationsJobs_Add":
      return S.FindDuplicateAnnotationsJobs_Add;
    case 103:
    case "FindDuplicateAnnotationsJobs_Get":
      return S.FindDuplicateAnnotationsJobs_Get;
    case 104:
    case "FindDuplicateAnnotationsJobs_Delete":
      return S.FindDuplicateAnnotationsJobs_Delete;
    case 105:
    case "Datasets_Get":
      return S.Datasets_Get;
    case 106:
    case "Datasets_Add":
      return S.Datasets_Add;
    case 107:
    case "Datasets_Delete":
      return S.Datasets_Delete;
    case 108:
    case "Modules_Add":
      return S.Modules_Add;
    case 109:
    case "Modules_Get":
      return S.Modules_Get;
    case 110:
    case "Modules_Delete":
      return S.Modules_Delete;
    case 111:
    case "InstalledModuleVersions_Add":
      return S.InstalledModuleVersions_Add;
    case 112:
    case "InstalledModuleVersions_Get":
      return S.InstalledModuleVersions_Get;
    case 113:
    case "InstalledModuleVersions_Delete":
      return S.InstalledModuleVersions_Delete;
    case 3:
    case "Search":
      return S.Search;
    case 114:
    case "SavedSearch_Get":
      return S.SavedSearch_Get;
    case 115:
    case "SavedSearch_Add":
      return S.SavedSearch_Add;
    case 116:
    case "SavedSearch_Delete":
      return S.SavedSearch_Delete;
    case 117:
    case "ModelVersionPublications_Add":
      return S.ModelVersionPublications_Add;
    case 118:
    case "ModelVersionPublications_Delete":
      return S.ModelVersionPublications_Delete;
    case 119:
    case "WorkflowPublications_Add":
      return S.WorkflowPublications_Add;
    case 120:
    case "WorkflowPublications_Delete":
      return S.WorkflowPublications_Delete;
    case 121:
    case "BulkOperation_Add":
      return S.BulkOperation_Add;
    case 122:
    case "BulkOperation_Get":
      return S.BulkOperation_Get;
    case 123:
    case "BulkOperation_Delete":
      return S.BulkOperation_Delete;
    case 124:
    case "HistoricalUsage_Get":
      return S.HistoricalUsage_Get;
    case 128:
    case "Uploads_Get":
      return S.Uploads_Get;
    case 129:
    case "Uploads_Add":
      return S.Uploads_Add;
    case 130:
    case "Uploads_Delete":
      return S.Uploads_Delete;
    case 131:
    case "Runners_Get":
      return S.Runners_Get;
    case 132:
    case "Runners_Add":
      return S.Runners_Add;
    case 133:
    case "Runners_Delete":
      return S.Runners_Delete;
    case 134:
    case "RunnerItems_Get":
      return S.RunnerItems_Get;
    case 135:
    case "RunnerItems_Add":
      return S.RunnerItems_Add;
    case 136:
    case "Nodepools_Get":
      return S.Nodepools_Get;
    case 137:
    case "Nodepools_Add":
      return S.Nodepools_Add;
    case 138:
    case "Nodepools_Delete":
      return S.Nodepools_Delete;
    case 139:
    case "ComputeClusters_Get":
      return S.ComputeClusters_Get;
    case 140:
    case "ComputeClusters_Add":
      return S.ComputeClusters_Add;
    case 141:
    case "ComputeClusters_Delete":
      return S.ComputeClusters_Delete;
    case 144:
    case "Deployments_Get":
      return S.Deployments_Get;
    case 145:
    case "Deployments_Add":
      return S.Deployments_Add;
    case 146:
    case "Deployments_Delete":
      return S.Deployments_Delete;
    case 148:
    case "InstanceTypes_Get":
      return S.InstanceTypes_Get;
    case 149:
    case "AuditLogs_Get":
      return S.AuditLogs_Get;
    case 151:
    case "LogEntries_Get":
      return S.LogEntries_Get;
    case 152:
    case "WorkflowVersionEvaluations_Get":
      return S.WorkflowVersionEvaluations_Get;
    case 153:
    case "WorkflowVersionEvaluations_Add":
      return S.WorkflowVersionEvaluations_Add;
    case 154:
    case "Pipelines_Get":
      return S.Pipelines_Get;
    case 155:
    case "Pipelines_Add":
      return S.Pipelines_Add;
    case 156:
    case "Pipelines_Delete":
      return S.Pipelines_Delete;
    case 157:
    case "PipelineSteps_Get":
      return S.PipelineSteps_Get;
    case 158:
    case "PipelineSteps_Add":
      return S.PipelineSteps_Add;
    case 159:
    case "PipelineSteps_Pull":
      return S.PipelineSteps_Pull;
    case 160:
    case "Secrets_Get":
      return S.Secrets_Get;
    case 161:
    case "Secrets_Add":
      return S.Secrets_Add;
    case 162:
    case "Secrets_Delete":
      return S.Secrets_Delete;
    case -1:
    case "UNRECOGNIZED":
    default:
      return S.UNRECOGNIZED;
  }
}

export function sToJSON(object: S): string {
  switch (object) {
    case S.undef:
      return "undef";
    case S.All:
      return "All";
    case S.Predict:
      return "Predict";
    case S.Inputs_Add:
      return "Inputs_Add";
    case S.Inputs_Get:
      return "Inputs_Get";
    case S.Inputs_Patch:
      return "Inputs_Patch";
    case S.Inputs_Delete:
      return "Inputs_Delete";
    case S.Outputs_Patch:
      return "Outputs_Patch";
    case S.Concepts_Add:
      return "Concepts_Add";
    case S.Concepts_Get:
      return "Concepts_Get";
    case S.Concepts_Patch:
      return "Concepts_Patch";
    case S.Concepts_Delete:
      return "Concepts_Delete";
    case S.Models_Add:
      return "Models_Add";
    case S.Models_Get:
      return "Models_Get";
    case S.Models_Patch:
      return "Models_Patch";
    case S.Models_Delete:
      return "Models_Delete";
    case S.Models_Train:
      return "Models_Train";
    case S.Models_Sync:
      return "Models_Sync";
    case S.ModelExports_Get:
      return "ModelExports_Get";
    case S.ModelExports_Add:
      return "ModelExports_Add";
    case S.Models_Pull:
      return "Models_Pull";
    case S.Workflows_Add:
      return "Workflows_Add";
    case S.Workflows_Get:
      return "Workflows_Get";
    case S.Workflows_Patch:
      return "Workflows_Patch";
    case S.Workflows_Delete:
      return "Workflows_Delete";
    case S.WorkflowMetrics_Get:
      return "WorkflowMetrics_Get";
    case S.WorkflowMetrics_Add:
      return "WorkflowMetrics_Add";
    case S.WorkflowMetrics_Delete:
      return "WorkflowMetrics_Delete";
    case S.TSNEVisualizations_Add:
      return "TSNEVisualizations_Add";
    case S.TSNEVisualizations_Get:
      return "TSNEVisualizations_Get";
    case S.Annotations_Add:
      return "Annotations_Add";
    case S.Annotations_Get:
      return "Annotations_Get";
    case S.Annotations_Patch:
      return "Annotations_Patch";
    case S.Annotations_Delete:
      return "Annotations_Delete";
    case S.Collectors_Add:
      return "Collectors_Add";
    case S.Collectors_Get:
      return "Collectors_Get";
    case S.Collectors_Delete:
      return "Collectors_Delete";
    case S.Apps_Add:
      return "Apps_Add";
    case S.Apps_Get:
      return "Apps_Get";
    case S.Apps_Delete:
      return "Apps_Delete";
    case S.Keys_Add:
      return "Keys_Add";
    case S.Keys_Get:
      return "Keys_Get";
    case S.Keys_Delete:
      return "Keys_Delete";
    case S.Collaborators_Add:
      return "Collaborators_Add";
    case S.Collaborators_Get:
      return "Collaborators_Get";
    case S.Collaborators_Delete:
      return "Collaborators_Delete";
    case S.Metrics_Add:
      return "Metrics_Add";
    case S.Metrics_Get:
      return "Metrics_Get";
    case S.Metrics_Delete:
      return "Metrics_Delete";
    case S.Tasks_Add:
      return "Tasks_Add";
    case S.Tasks_Get:
      return "Tasks_Get";
    case S.Tasks_Delete:
      return "Tasks_Delete";
    case S.PasswordPolicies_Add:
      return "PasswordPolicies_Add";
    case S.PasswordPolicies_Get:
      return "PasswordPolicies_Get";
    case S.PasswordPolicies_Delete:
      return "PasswordPolicies_Delete";
    case S.LabelOrders_Get:
      return "LabelOrders_Get";
    case S.LabelOrders_Add:
      return "LabelOrders_Add";
    case S.LabelOrders_Delete:
      return "LabelOrders_Delete";
    case S.FindDuplicateAnnotationsJobs_Add:
      return "FindDuplicateAnnotationsJobs_Add";
    case S.FindDuplicateAnnotationsJobs_Get:
      return "FindDuplicateAnnotationsJobs_Get";
    case S.FindDuplicateAnnotationsJobs_Delete:
      return "FindDuplicateAnnotationsJobs_Delete";
    case S.Datasets_Get:
      return "Datasets_Get";
    case S.Datasets_Add:
      return "Datasets_Add";
    case S.Datasets_Delete:
      return "Datasets_Delete";
    case S.Modules_Add:
      return "Modules_Add";
    case S.Modules_Get:
      return "Modules_Get";
    case S.Modules_Delete:
      return "Modules_Delete";
    case S.InstalledModuleVersions_Add:
      return "InstalledModuleVersions_Add";
    case S.InstalledModuleVersions_Get:
      return "InstalledModuleVersions_Get";
    case S.InstalledModuleVersions_Delete:
      return "InstalledModuleVersions_Delete";
    case S.Search:
      return "Search";
    case S.SavedSearch_Get:
      return "SavedSearch_Get";
    case S.SavedSearch_Add:
      return "SavedSearch_Add";
    case S.SavedSearch_Delete:
      return "SavedSearch_Delete";
    case S.ModelVersionPublications_Add:
      return "ModelVersionPublications_Add";
    case S.ModelVersionPublications_Delete:
      return "ModelVersionPublications_Delete";
    case S.WorkflowPublications_Add:
      return "WorkflowPublications_Add";
    case S.WorkflowPublications_Delete:
      return "WorkflowPublications_Delete";
    case S.BulkOperation_Add:
      return "BulkOperation_Add";
    case S.BulkOperation_Get:
      return "BulkOperation_Get";
    case S.BulkOperation_Delete:
      return "BulkOperation_Delete";
    case S.HistoricalUsage_Get:
      return "HistoricalUsage_Get";
    case S.Uploads_Get:
      return "Uploads_Get";
    case S.Uploads_Add:
      return "Uploads_Add";
    case S.Uploads_Delete:
      return "Uploads_Delete";
    case S.Runners_Get:
      return "Runners_Get";
    case S.Runners_Add:
      return "Runners_Add";
    case S.Runners_Delete:
      return "Runners_Delete";
    case S.RunnerItems_Get:
      return "RunnerItems_Get";
    case S.RunnerItems_Add:
      return "RunnerItems_Add";
    case S.Nodepools_Get:
      return "Nodepools_Get";
    case S.Nodepools_Add:
      return "Nodepools_Add";
    case S.Nodepools_Delete:
      return "Nodepools_Delete";
    case S.ComputeClusters_Get:
      return "ComputeClusters_Get";
    case S.ComputeClusters_Add:
      return "ComputeClusters_Add";
    case S.ComputeClusters_Delete:
      return "ComputeClusters_Delete";
    case S.Deployments_Get:
      return "Deployments_Get";
    case S.Deployments_Add:
      return "Deployments_Add";
    case S.Deployments_Delete:
      return "Deployments_Delete";
    case S.InstanceTypes_Get:
      return "InstanceTypes_Get";
    case S.AuditLogs_Get:
      return "AuditLogs_Get";
    case S.LogEntries_Get:
      return "LogEntries_Get";
    case S.WorkflowVersionEvaluations_Get:
      return "WorkflowVersionEvaluations_Get";
    case S.WorkflowVersionEvaluations_Add:
      return "WorkflowVersionEvaluations_Add";
    case S.Pipelines_Get:
      return "Pipelines_Get";
    case S.Pipelines_Add:
      return "Pipelines_Add";
    case S.Pipelines_Delete:
      return "Pipelines_Delete";
    case S.PipelineSteps_Get:
      return "PipelineSteps_Get";
    case S.PipelineSteps_Add:
      return "PipelineSteps_Add";
    case S.PipelineSteps_Pull:
      return "PipelineSteps_Pull";
    case S.Secrets_Get:
      return "Secrets_Get";
    case S.Secrets_Add:
      return "Secrets_Add";
    case S.Secrets_Delete:
      return "Secrets_Delete";
    case S.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ScopeList {
  /** These are the list of low-level scopes to check from the enum below. */
  scopes: S[];
  /** This is a list of fully qualified grpc names to check. */
  endpoints: string[];
}

function createBaseScopeList(): ScopeList {
  return { scopes: [], endpoints: [] };
}

export const ScopeList: MessageFns<ScopeList> = {
  encode(message: ScopeList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.scopes) {
      writer.int32(v);
    }
    writer.join();
    for (const v of message.endpoints) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScopeList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScopeList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.scopes.push(reader.int32() as any);

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.scopes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.endpoints.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScopeList {
    return {
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => sFromJSON(e)) : [],
      endpoints: globalThis.Array.isArray(object?.endpoints)
        ? object.endpoints.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ScopeList): unknown {
    const obj: any = {};
    if (message.scopes?.length) {
      obj.scopes = message.scopes.map((e) => sToJSON(e));
    }
    if (message.endpoints?.length) {
      obj.endpoints = message.endpoints;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ScopeList>, I>>(base?: I): ScopeList {
    return ScopeList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ScopeList>, I>>(object: I): ScopeList {
    const message = createBaseScopeList();
    message.scopes = object.scopes?.map((e) => e) || [];
    message.endpoints = object.endpoints?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
