// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.20.3
// source: proto/clarifai/api/status/status.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { StatusCode, statusCodeFromJSON, statusCodeToJSON } from "./status_code";

export const protobufPackage = "clarifai.api.status";

export interface Status {
  /** Status code from internal codes. */
  code: StatusCode;
  /** A short description of the error. */
  description: string;
  /**
   * More details of the given error.
   * These details may be exposed to non-technical users.
   * For technical details, try to use developer_notes field.
   */
  details: string;
  /**
   * For some environment we may return a stack trace to help debug
   * any issues.
   */
  stackTrace: string[];
  /** specifically for long running jobs */
  percentCompleted: number;
  /** if status is pending, how much time is remaining (in seconds) */
  timeRemaining: number;
  /** A request ID may be present, to help monitoring and tracking requests */
  reqId: string;
  /** Internal Annotation (do not set in production, for internal Clarifai use only). */
  internalDetails: string;
  /** Resource location info for redirect, when resource location has been changed. */
  redirectInfo:
    | RedirectInfo
    | undefined;
  /**
   * Notes for developer.
   * These notes are rather technical details for developers how to interpret the status,
   * e.g. why an error occurred and how to avoid getting the error.
   */
  developerNotes: string;
}

export interface RedirectInfo {
  /** New location for the resource. Used to set response Location header. */
  url: string;
  /** Resource type */
  resourceType: string;
  /** Old resource id */
  oldResourceId: string;
  /** New resource id */
  newResourceId: string;
}

/**
 * Base message to return when there is a internal server error that
 * is not caught elsewhere.
 */
export interface BaseResponse {
  status: Status | undefined;
}

function createBaseStatus(): Status {
  return {
    code: 0,
    description: "",
    details: "",
    stackTrace: [],
    percentCompleted: 0,
    timeRemaining: 0,
    reqId: "",
    internalDetails: "",
    redirectInfo: undefined,
    developerNotes: "",
  };
}

export const Status: MessageFns<Status> = {
  encode(message: Status, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.details !== "") {
      writer.uint32(26).string(message.details);
    }
    for (const v of message.stackTrace) {
      writer.uint32(34).string(v!);
    }
    if (message.percentCompleted !== 0) {
      writer.uint32(40).uint32(message.percentCompleted);
    }
    if (message.timeRemaining !== 0) {
      writer.uint32(48).uint32(message.timeRemaining);
    }
    if (message.reqId !== "") {
      writer.uint32(58).string(message.reqId);
    }
    if (message.internalDetails !== "") {
      writer.uint32(66).string(message.internalDetails);
    }
    if (message.redirectInfo !== undefined) {
      RedirectInfo.encode(message.redirectInfo, writer.uint32(74).fork()).join();
    }
    if (message.developerNotes !== "") {
      writer.uint32(82).string(message.developerNotes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Status {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.details = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.stackTrace.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.percentCompleted = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.timeRemaining = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.reqId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.internalDetails = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.redirectInfo = RedirectInfo.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.developerNotes = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Status {
    return {
      code: isSet(object.code) ? statusCodeFromJSON(object.code) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      details: isSet(object.details) ? globalThis.String(object.details) : "",
      stackTrace: globalThis.Array.isArray(object?.stackTrace)
        ? object.stackTrace.map((e: any) => globalThis.String(e))
        : [],
      percentCompleted: isSet(object.percentCompleted) ? globalThis.Number(object.percentCompleted) : 0,
      timeRemaining: isSet(object.timeRemaining) ? globalThis.Number(object.timeRemaining) : 0,
      reqId: isSet(object.reqId) ? globalThis.String(object.reqId) : "",
      internalDetails: isSet(object.internalDetails) ? globalThis.String(object.internalDetails) : "",
      redirectInfo: isSet(object.redirectInfo) ? RedirectInfo.fromJSON(object.redirectInfo) : undefined,
      developerNotes: isSet(object.developerNotes) ? globalThis.String(object.developerNotes) : "",
    };
  },

  toJSON(message: Status): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = statusCodeToJSON(message.code);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.details !== "") {
      obj.details = message.details;
    }
    if (message.stackTrace?.length) {
      obj.stackTrace = message.stackTrace;
    }
    if (message.percentCompleted !== 0) {
      obj.percentCompleted = Math.round(message.percentCompleted);
    }
    if (message.timeRemaining !== 0) {
      obj.timeRemaining = Math.round(message.timeRemaining);
    }
    if (message.reqId !== "") {
      obj.reqId = message.reqId;
    }
    if (message.internalDetails !== "") {
      obj.internalDetails = message.internalDetails;
    }
    if (message.redirectInfo !== undefined) {
      obj.redirectInfo = RedirectInfo.toJSON(message.redirectInfo);
    }
    if (message.developerNotes !== "") {
      obj.developerNotes = message.developerNotes;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Status>, I>>(base?: I): Status {
    return Status.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Status>, I>>(object: I): Status {
    const message = createBaseStatus();
    message.code = object.code ?? 0;
    message.description = object.description ?? "";
    message.details = object.details ?? "";
    message.stackTrace = object.stackTrace?.map((e) => e) || [];
    message.percentCompleted = object.percentCompleted ?? 0;
    message.timeRemaining = object.timeRemaining ?? 0;
    message.reqId = object.reqId ?? "";
    message.internalDetails = object.internalDetails ?? "";
    message.redirectInfo = (object.redirectInfo !== undefined && object.redirectInfo !== null)
      ? RedirectInfo.fromPartial(object.redirectInfo)
      : undefined;
    message.developerNotes = object.developerNotes ?? "";
    return message;
  },
};

function createBaseRedirectInfo(): RedirectInfo {
  return { url: "", resourceType: "", oldResourceId: "", newResourceId: "" };
}

export const RedirectInfo: MessageFns<RedirectInfo> = {
  encode(message: RedirectInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    if (message.resourceType !== "") {
      writer.uint32(18).string(message.resourceType);
    }
    if (message.oldResourceId !== "") {
      writer.uint32(26).string(message.oldResourceId);
    }
    if (message.newResourceId !== "") {
      writer.uint32(34).string(message.newResourceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RedirectInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRedirectInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.resourceType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.oldResourceId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.newResourceId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RedirectInfo {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      resourceType: isSet(object.resourceType) ? globalThis.String(object.resourceType) : "",
      oldResourceId: isSet(object.oldResourceId) ? globalThis.String(object.oldResourceId) : "",
      newResourceId: isSet(object.newResourceId) ? globalThis.String(object.newResourceId) : "",
    };
  },

  toJSON(message: RedirectInfo): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.resourceType !== "") {
      obj.resourceType = message.resourceType;
    }
    if (message.oldResourceId !== "") {
      obj.oldResourceId = message.oldResourceId;
    }
    if (message.newResourceId !== "") {
      obj.newResourceId = message.newResourceId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RedirectInfo>, I>>(base?: I): RedirectInfo {
    return RedirectInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RedirectInfo>, I>>(object: I): RedirectInfo {
    const message = createBaseRedirectInfo();
    message.url = object.url ?? "";
    message.resourceType = object.resourceType ?? "";
    message.oldResourceId = object.oldResourceId ?? "";
    message.newResourceId = object.newResourceId ?? "";
    return message;
  },
};

function createBaseBaseResponse(): BaseResponse {
  return { status: undefined };
}

export const BaseResponse: MessageFns<BaseResponse> = {
  encode(message: BaseResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BaseResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BaseResponse {
    return { status: isSet(object.status) ? Status.fromJSON(object.status) : undefined };
  },

  toJSON(message: BaseResponse): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BaseResponse>, I>>(base?: I): BaseResponse {
    return BaseResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BaseResponse>, I>>(object: I): BaseResponse {
    const message = createBaseBaseResponse();
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
