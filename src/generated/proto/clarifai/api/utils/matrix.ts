// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.20.3
// source: proto/clarifai/api/utils/matrix.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

/**
 * Store matrix of uint64s values.
 * It is recommended to store the matrix as a 1D array
 * because it produces less bytes during serialization than a 2D array.
 * The matrix does store the number of columns, but it does not store the number of rows.
 * The number of rows can automatically be calculated as length(data)/n_cols.
 */
export interface MatrixUint64 {
  /** Number of columns */
  nCols: number;
  /**
   * Matrix data stored as an array.
   * In order to access matrix element at row i & column j, use data[i*n_cols+j].
   */
  data: number[];
}

function createBaseMatrixUint64(): MatrixUint64 {
  return { nCols: 0, data: [] };
}

export const MatrixUint64: MessageFns<MatrixUint64> = {
  encode(message: MatrixUint64, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nCols !== 0) {
      writer.uint32(8).uint64(message.nCols);
    }
    writer.uint32(18).fork();
    for (const v of message.data) {
      writer.uint64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MatrixUint64 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMatrixUint64();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.nCols = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.data.push(longToNumber(reader.uint64()));

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.data.push(longToNumber(reader.uint64()));
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MatrixUint64 {
    return {
      nCols: isSet(object.nCols) ? globalThis.Number(object.nCols) : 0,
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: MatrixUint64): unknown {
    const obj: any = {};
    if (message.nCols !== 0) {
      obj.nCols = Math.round(message.nCols);
    }
    if (message.data?.length) {
      obj.data = message.data.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MatrixUint64>, I>>(base?: I): MatrixUint64 {
    return MatrixUint64.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MatrixUint64>, I>>(object: I): MatrixUint64 {
    const message = createBaseMatrixUint64();
    message.nCols = object.nCols ?? 0;
    message.data = object.data?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
