// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.20.3
// source: proto/clarifai/api/utils/test_proto.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "clarifai.api.utils";

export interface TestProto {
  id: string;
  message: string;
  value: number;
  imageBytes: Uint8Array;
  stringOneof?: string | undefined;
  boolOneof?: boolean | undefined;
  messageOneof?: TestProto2 | undefined;
}

export interface TestProto2 {
  id: string;
  flip: boolean;
}

function createBaseTestProto(): TestProto {
  return {
    id: "",
    message: "",
    value: 0,
    imageBytes: new Uint8Array(0),
    stringOneof: undefined,
    boolOneof: undefined,
    messageOneof: undefined,
  };
}

export const TestProto: MessageFns<TestProto> = {
  encode(message: TestProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.value !== 0) {
      writer.uint32(25).double(message.value);
    }
    if (message.imageBytes.length !== 0) {
      writer.uint32(34).bytes(message.imageBytes);
    }
    if (message.stringOneof !== undefined) {
      writer.uint32(42).string(message.stringOneof);
    }
    if (message.boolOneof !== undefined) {
      writer.uint32(48).bool(message.boolOneof);
    }
    if (message.messageOneof !== undefined) {
      TestProto2.encode(message.messageOneof, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.value = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.imageBytes = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.stringOneof = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.boolOneof = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.messageOneof = TestProto2.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestProto {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
      imageBytes: isSet(object.imageBytes) ? bytesFromBase64(object.imageBytes) : new Uint8Array(0),
      stringOneof: isSet(object.stringOneof) ? globalThis.String(object.stringOneof) : undefined,
      boolOneof: isSet(object.boolOneof) ? globalThis.Boolean(object.boolOneof) : undefined,
      messageOneof: isSet(object.messageOneof) ? TestProto2.fromJSON(object.messageOneof) : undefined,
    };
  },

  toJSON(message: TestProto): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.value !== 0) {
      obj.value = message.value;
    }
    if (message.imageBytes.length !== 0) {
      obj.imageBytes = base64FromBytes(message.imageBytes);
    }
    if (message.stringOneof !== undefined) {
      obj.stringOneof = message.stringOneof;
    }
    if (message.boolOneof !== undefined) {
      obj.boolOneof = message.boolOneof;
    }
    if (message.messageOneof !== undefined) {
      obj.messageOneof = TestProto2.toJSON(message.messageOneof);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TestProto>, I>>(base?: I): TestProto {
    return TestProto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TestProto>, I>>(object: I): TestProto {
    const message = createBaseTestProto();
    message.id = object.id ?? "";
    message.message = object.message ?? "";
    message.value = object.value ?? 0;
    message.imageBytes = object.imageBytes ?? new Uint8Array(0);
    message.stringOneof = object.stringOneof ?? undefined;
    message.boolOneof = object.boolOneof ?? undefined;
    message.messageOneof = (object.messageOneof !== undefined && object.messageOneof !== null)
      ? TestProto2.fromPartial(object.messageOneof)
      : undefined;
    return message;
  },
};

function createBaseTestProto2(): TestProto2 {
  return { id: "", flip: false };
}

export const TestProto2: MessageFns<TestProto2> = {
  encode(message: TestProto2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.flip !== false) {
      writer.uint32(16).bool(message.flip);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestProto2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestProto2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.flip = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestProto2 {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      flip: isSet(object.flip) ? globalThis.Boolean(object.flip) : false,
    };
  },

  toJSON(message: TestProto2): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.flip !== false) {
      obj.flip = message.flip;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TestProto2>, I>>(base?: I): TestProto2 {
    return TestProto2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TestProto2>, I>>(object: I): TestProto2 {
    const message = createBaseTestProto2();
    message.id = object.id ?? "";
    message.flip = object.flip ?? false;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
